# Execution begins at address 0 
	.pos 0 
init:
	irmovq Stack, %rsp  	# Set up stack pointer  
	call Main		# Execute main program
	halt			# Terminate program 

# Array of 4 elements + terminating 0
	.align 8 	
array:
	.quad 0x000d000d000d000d
	.quad 0x00c000c000c000c0
	.quad 0x0b000b000b000b00
	.quad 0xa000a000a000a000
	.quad 0

Main:	irmovq array,%rdi
	call len		# len(array)
	ret 

# Registers:
#  %rdi: a
#  %rax: len
#  %rdx: val
#  %r8:  1
#  %r9:  8

len:
	irmovq $1, %r8		# Constant 1
	irmovq $8, %r9		# Constant 8
	irmovq $0, %rax		# len = 0
	mrmovq (%rdi), %rdx	# val = *a
	andq %rdx, %rdx		# Test val
	je Done	   		# If zero, goto Done
Loop:
	addq %r8, %rax		# len++
	addq %r9, %rdi		# a++
	mrmovq (%rdi), %rdx	# val = *a
	andq %rdx, %rdx		# Test val
	jne Loop   		# If !0, goto Loop
Done:
	ret

# Stack starts here and grows to lower addresses
  	.pos 0x100
Stack:
	